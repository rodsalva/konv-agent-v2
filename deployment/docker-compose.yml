version: '3.8'

services:
  app:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      - db
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - API_VERSION=${API_VERSION:-v1}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - API_KEY_PREFIX=${API_KEY_PREFIX:-mcp_agent_}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - MCP_SERVER_NAME=${MCP_SERVER_NAME:-feedback-intelligence-backend}
      - MCP_SERVER_VERSION=${MCP_SERVER_VERSION:-1.0.0}
      - MCP_TRANSPORT=${MCP_TRANSPORT:-stdio}
    volumes:
      - app_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-konv_agent}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../supabase_schema.sql:/docker-entrypoint-initdb.d/01_schema.sql
      - ../competitor_schema.sql:/docker-entrypoint-initdb.d/02_competitor_schema.sql
      - ../sentiment_schema.sql:/docker-entrypoint-initdb.d/03_sentiment_schema.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Uncomment this section if you want to include a Redis instance
  # redis:
  #   image: redis:alpine
  #   ports:
  #     - "${REDIS_PORT:-6379}:6379"
  #   volumes:
  #     - redis_data:/data
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Uncomment this section if you want to include a monitoring tool
  # prometheus:
  #   image: prom/prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   restart: unless-stopped

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - "3001:3000"
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   depends_on:
  #     - prometheus
  #   restart: unless-stopped

volumes:
  postgres_data:
  app_logs:
  # redis_data:
  # prometheus_data:
  # grafana_data: